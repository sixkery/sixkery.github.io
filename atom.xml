<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sixkery&#39;s Blog</title>
  
  <subtitle>写文字的地方</subtitle>
  <link href="http://sixkery.top/atom.xml" rel="self"/>
  
  <link href="http://sixkery.top/"/>
  <updated>2020-08-12T00:21:16.425Z</updated>
  <id>http://sixkery.top/</id>
  
  <author>
    <name>sixkery</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次MySQL 存储过程的简单实践</title>
    <link href="http://sixkery.top/2020/05/26/%E8%AE%B0%E4%B8%80%E6%AC%A1MySQL%20%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/"/>
    <id>http://sixkery.top/2020/05/26/%E8%AE%B0%E4%B8%80%E6%AC%A1MySQL%20%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-05-26T10:15:06.000Z</published>
    <updated>2020-08-12T00:21:16.425Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>使用存储过程,循环插入 100 条数据.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> proc_initData;<span class="comment">--如果存在此存储过程则删掉</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_initData()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">    WHILE i&lt;=10000 DO</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">data</span>(user_id) <span class="keyword">VALUES</span>(i);</span><br><span class="line">        <span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">CALL</span> proc_initData();</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>使用存储过程,游标 给表中指定字段添加数据.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--  给 om_dynamic_template 表中添加数据</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> insertTemplate;<span class="comment">--如果存在此存储过程则删掉</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> insertTemplate()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 定义一个游标数据变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> ids <span class="built_in">varchar</span> (<span class="number">20</span>);</span><br><span class="line"><span class="comment">-- 遍历数据结束的标志</span></span><br><span class="line"><span class="keyword">DECLARE</span> done <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="literal">FALSE</span>;</span><br><span class="line"><span class="comment">-- 游标</span></span><br><span class="line"><span class="keyword">DECLARE</span> business_ids <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">from</span> bm_business;</span><br><span class="line"><span class="comment">-- 将结束标志绑定到游标</span></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="keyword">FOUND</span> <span class="keyword">SET</span> done = <span class="literal">TRUE</span>;</span><br><span class="line"><span class="comment">-- 打开游标</span></span><br><span class="line">open business_ids;</span><br><span class="line"> <span class="comment">-- 开始循环</span></span><br><span class="line">    read_loop: LOOP</span><br><span class="line"><span class="comment">-- 提取游标里的数据&#x27;</span></span><br><span class="line">FETCH business_ids into  ids;</span><br><span class="line"><span class="comment">-- 声明结束的时候</span></span><br><span class="line">IF done THEN</span><br><span class="line">      LEAVE read_loop;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="comment">-- 做想做的事情</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> om_dynamic_template(<span class="keyword">id</span>, <span class="string">`name`</span>, describes,business_id) <span class="keyword">VALUES</span>(i,<span class="string">&quot;默认模板&quot;</span>,<span class="string">&quot;默认模板&quot;</span>,ids);</span><br><span class="line"> <span class="keyword">SET</span> i = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line">    CLOSE business_ids;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">CALL</span> insertTemplate();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> insertDynamic;<span class="comment">--如果存在此存储过程则删掉</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> insertDynamic()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- 定义一个游标数据变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> ids <span class="built_in">varchar</span> (<span class="number">20</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> idss <span class="built_in">varchar</span> (<span class="number">20</span>);</span><br><span class="line"><span class="comment">-- 遍历数据结束的标志</span></span><br><span class="line"><span class="keyword">DECLARE</span> done <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="literal">FALSE</span>;</span><br><span class="line"><span class="comment">-- 游标</span></span><br><span class="line"><span class="keyword">DECLARE</span> template_ids <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">from</span> om_dynamic_template;</span><br><span class="line"><span class="keyword">DECLARE</span> business_ids <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> business_id <span class="keyword">from</span> om_dynamic_template;</span><br><span class="line"><span class="comment">-- 将结束标志绑定到游标</span></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE <span class="keyword">HANDLER</span> <span class="keyword">FOR</span> <span class="keyword">NOT</span> <span class="keyword">FOUND</span> <span class="keyword">SET</span> done = <span class="literal">TRUE</span>;</span><br><span class="line"><span class="comment">-- 打开游标</span></span><br><span class="line">open business_ids;</span><br><span class="line">open template_ids;</span><br><span class="line"> <span class="comment">-- 开始循环</span></span><br><span class="line">    read_loop: LOOP</span><br><span class="line"><span class="comment">-- 提取游标里的数据&#x27;</span></span><br><span class="line">FETCH business_ids into  ids;</span><br><span class="line">FETCH template_ids into  idss;</span><br><span class="line"><span class="comment">-- 声明结束的时候</span></span><br><span class="line">IF done THEN</span><br><span class="line">      LEAVE read_loop;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="comment">-- 做想做的事情</span></span><br><span class="line">    <span class="keyword">update</span> om_dynamic <span class="keyword">set</span> template_id = idss <span class="keyword">where</span> business_id = ids;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line">    CLOSE business_ids;</span><br><span class="line">  CLOSE template_ids;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">CALL</span> insertDynamic();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用存储过程,循环插入 100 条数据.&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="MySQL" scheme="http://sixkery.top/categories/MySQL/"/>
    
    
    <category term="存储过程" scheme="http://sixkery.top/tags/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>树数据结构，easy 程度</title>
    <link href="http://sixkery.top/2020/03/12/title/"/>
    <id>http://sixkery.top/2020/03/12/title/</id>
    <published>2020-03-12T10:15:06.000Z</published>
    <updated>2020-08-12T00:25:41.966Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>some-tree</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给出两个二叉树，请写出一个判断两个二叉树是否相等的函数。</p><p>判断两个二叉树相等的条件是：两个二叉树的结构相同，并且相同的节点上具有相同的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 判断是否都为空</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 判断是否一棵树为空</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span> || q == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 判断值是否相等</span></span><br><span class="line">    <span class="keyword">if</span> (p.val != q.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 判断左右子树是否相等</span></span><br><span class="line">    <span class="keyword">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><ol><li>判断两棵树是否都为空。</li><li>判断是否一棵树为空。</li><li>判断值是否相等。</li><li>递归判断左右子数是否相等。</li></ol><p>maximum-depth-of-binary-tree</p><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>求给定二叉树的最大深度，</p><p>最大深度是指树的根结点到最远叶子结点的最长路径上结点的数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最大深度是:左边叶子深度加一 或者右边叶子深度加一</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root 树</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最大深度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;            <span class="comment">// 递归中止条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = maxDepth(root.left);   <span class="comment">// 取左边叶子的最大深度</span></span><br><span class="line">    <span class="keyword">int</span> n = maxDepth(root.right);  <span class="comment">// 取右边叶子的最大深度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (Math.max(m, n)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>integer-to-roman</p><p>请将给出的整数转化为罗马数字</p><p>保证输入数字的范围在1 到 3999之间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 字符串对应</span></span><br><span class="line">    <span class="keyword">int</span>[] values = &#123; <span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span> &#125;;</span><br><span class="line">    String[] str = &#123; <span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写的真是妙啊</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt;= values[i]) &#123;</span><br><span class="line">            num -= values[i];</span><br><span class="line">            sb.append(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>现在有一个整数类型的数组，数组中素只有一个元素只出现一次，其余的元素都出现两次。</p><p><strong>注意：</strong></p><p>你需要给出一个线性时间复杂度的算法，你能在不使用额外内存空间的情况下解决这个问题么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A int整型一维数组 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span> <span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            num = A[i]^num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据异或运算特点：两个相同的数进行异或，结果为 0</p><p>补充：</p><ol><li>0 异或一个数为这个数本身。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot; title=&quot;树&quot;&gt;&lt;/a&gt;树&lt;/h3&gt;&lt;p&gt;some-tree&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述</summary>
      
    
    
    
    <category term="leetcode" scheme="http://sixkery.top/categories/leetcode/"/>
    
    
    <category term="算法" scheme="http://sixkery.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>分割平衡字符串</title>
    <link href="http://sixkery.top/2019/09/26/2019-09-26-ip/"/>
    <id>http://sixkery.top/2019/09/26/2019-09-26-ip/</id>
    <published>2019-09-26T10:15:06.000Z</published>
    <updated>2020-08-12T00:10:54.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在一个「平衡字符串」中，’L’ 和 ‘R’ 字符的数量是相同的。<br>给出一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。</p><p>返回可以通过分割得到的平衡字符串的最大数量。</p><p>示例 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;RLRRLLRLRL&quot;</span></span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure><p>解释：s 可以分割为 “RL”, “RRLL”, “RL”, “RL”, 每个子字符串中都包含相同数量的 ‘L’ 和 ‘R’。</p><p>示例 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;RLLLLRRRLR&quot;</span></span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><p>解释：s 可以分割为 “RL”, “LLLRRR”, “LR”, 每个子字符串中都包含相同数量的 ‘L’ 和 ‘R’。</p><p>示例 3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;LLLLRRRR&quot;</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><p>解释：s 只能保持原样 “LLLLRRRR”.</p><p>提示：</p><ul><li>1 &lt;= s.length &lt;= 1000</li><li>s[i] = ‘L’ 或 ‘R’</li></ul><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>使用对消的思路。从左到右遍历, 根据题意，左边的 ‘L’ 或 ‘R’ 与右边的 ‘L’ 或 ‘R’ 相等。可以根据这个条件进行消除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">balancedStringSplit</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;L&#x27;</span>) a++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;R&#x27;</span>) a--;</span><br><span class="line">            <span class="comment">// 每次对消成功 则生成一个平衡子串</span></span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">0</span>) b++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>体现的贪心算法，描述说是：贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。</p><p>在这里理解应该是，对消之前不影响对消之后的结果。</p><br><p>转载请注明：<a href="http://sixkery.github.io">sixkery的博客</a> » <a href="http://sixkery.github.io/201/09/ip/">点击阅读原文</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;在一个「平衡字符串」中，’L’ 和 ‘R’ 字符的数量是相同的。&lt;br&gt;给出一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。&lt;/p&gt;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://sixkery.top/categories/leetcode/"/>
    
    
    <category term="算法" scheme="http://sixkery.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="http://sixkery.top/2019/08/10/2019-08-10-twoSum/"/>
    <id>http://sixkery.top/2019/08/10/2019-08-10-twoSum/</id>
    <published>2019-08-10T13:15:06.000Z</published>
    <updated>2020-08-12T00:10:54.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line"></span><br><span class="line">因为 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span></span><br><span class="line">所以返回 [<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>最容易想到的暴力解决方法，内层循环找到当前元素和 target 的差值，内层循环寻找该差值，找到就返回这两个元素的下标。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] = target - nums[i]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 HashMap 减少寻找差值的遍历次数，在上边的暴力解法中，第二层循环浪费大量时间，可以使用 HashMap 可以减少时间，每遍历到一个元素，就计算该元素与 target 之间的差值，然后到 HashMap 中寻找该差值，如果找到，则返回两个元素在数组中的下标，如果没有找到，则将当前元素存入 HashMap 中 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> dif = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.get(dif) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                res[<span class="number">0</span>] = map.get(dif);</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sixkery.github.io">sixkery的博客</a> » <a href="http://sixkery.github.io/201/09/ip/">点击阅读原文</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://sixkery.top/categories/leetcode/"/>
    
    
    <category term="算法" scheme="http://sixkery.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 集成 ElasticSearch 实现 MySQL 数据同步</title>
    <link href="http://sixkery.top/2019/07/09/2019-7-09-ElasticSearch/"/>
    <id>http://sixkery.top/2019/07/09/2019-7-09-ElasticSearch/</id>
    <published>2019-07-09T13:15:06.000Z</published>
    <updated>2020-08-12T00:10:54.594Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot-集成-ElasticSearch-实现-MySQL-数据同步"><a href="#SpringBoot-集成-ElasticSearch-实现-MySQL-数据同步" class="headerlink" title="SpringBoot 集成 ElasticSearch 实现 MySQL 数据同步"></a>SpringBoot 集成 ElasticSearch 实现 MySQL 数据同步</h3><p>需要提前安装好 ElasticSearch 。logstash 安装下文有具体说明。<br>新建表 blog 必须有字段 id update_time，可参考项目中 entity 包下字段建表。<br>项目地址 <a href="https://github.com/sixkery/blog_index">SpringBoot 搭建博客检索系统</a><br>使用步骤</p><ol><li>download 本项目</li><li>修改 yml 文件中的数据库配置，es 配置。</li><li>配置 logstash ，见下文。</li><li>启动本项目，在本地 8081 端口访问项目，可以看到有两个按钮，分别是通过 MySQL 的模糊查询和 es 的检索耗时比较。</li></ol><h3 id="配置-logstash"><a href="#配置-logstash" class="headerlink" title="配置 logstash"></a>配置 logstash</h3><p>使用 logstash 同步  mysql 中的数据。全量同步，增量更新<br>这里使用虚拟机中的 centos 。<br>前提，CentOS 中安装 ElasticSearch 。<br>第一步，下载 <a href="https://www.elastic.co/cn/downloads/past-releases#logstash">logstash</a><br>第二步，把数据库连接的驱动 jar 包放到 logstash 的目录中。<br><img src="../images/1574645141708.png" alt="enter description here"><br>第三步，在 config 文件夹中新建文件 <code>mysql.conf</code>，配置数据库，es 端口等输入输出规则</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">input</span>&#123;</span><br><span class="line">  <span class="string">jdbc</span>&#123;</span><br><span class="line">    <span class="comment"># jdbc 驱动包位置</span></span><br><span class="line">    <span class="string">jdbc_driver_library</span> =&gt; <span class="string">&quot;/home/es/logstash-6.2.4/mysql-connector-java-5.1.6.jar&quot;</span></span><br><span class="line">    <span class="comment"># 要使用的驱动包类</span></span><br><span class="line">    <span class="string">jdbc_driver_class</span> =&gt; <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> </span><br><span class="line">    <span class="comment"># mysql 数据库的连接信息</span></span><br><span class="line">    <span class="string">jdbc_connection_string</span> =&gt; <span class="string">&quot;jdbc:mysql://localhost:3306/blog&quot;</span></span><br><span class="line">    <span class="comment"># mysql 用户</span></span><br><span class="line">    <span class="string">jdbc_user</span> =&gt; <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="comment"># 密码</span></span><br><span class="line">    <span class="string">jdbc_password</span> =&gt; <span class="string">&quot;密码&quot;</span></span><br><span class="line">    <span class="comment"># 定时任务，多久执行一次查询，默认一分钟，如果想要没有延迟，可以使用 schedule =&gt; &quot;* * * * *&quot;</span></span><br><span class="line">    <span class="string">schedule</span> =&gt; <span class="string">&quot;* * * * *&quot;</span></span><br><span class="line">    <span class="comment"># 清空上一次的 sql_last_value 记录</span></span><br><span class="line">    <span class="string">clean_run</span> =&gt; <span class="string">true</span></span><br><span class="line"><span class="string"></span>    <span class="comment"># 要执行的语句</span></span><br><span class="line">    <span class="string">statement</span> =&gt; <span class="string">&quot;select * from t_blog where update_time &gt; :sql_last_value and update_time &lt; NOW() order by update_time desc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">  <span class="string">elasticsearch</span> &#123;</span><br><span class="line">    <span class="comment"># es host : port</span></span><br><span class="line">    <span class="string">hosts</span> =&gt; [<span class="string">&quot;192.168.42.134:9200&quot;</span>]</span><br><span class="line">    <span class="comment"># 索引</span></span><br><span class="line">    <span class="string">index</span> =&gt; <span class="string">&quot;blog&quot;</span></span><br><span class="line">    <span class="comment"># _id</span></span><br><span class="line">    <span class="string">document_id</span> =&gt; <span class="string">&quot;%&#123;id&#125;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第四步，以配置文件的方式启动 logstash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[es@localhost bin]$ ./logstash -f ../config/mysql.conf </span><br></pre></td></tr></table></figure><p>第五步，kibana 中查看是否同步成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">GET blog/_stats</span><br><span class="line">// 查看全部数据</span><br><span class="line">POST blog/_search</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;SpringBoot-集成-ElasticSearch-实现-MySQL-数据同步&quot;&gt;&lt;a href=&quot;#SpringBoot-集成-ElasticSearch-实现-MySQL-数据同步&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot</summary>
      
    
    
    
    <category term="ElasticSearch" scheme="http://sixkery.top/categories/ElasticSearch/"/>
    
    
    <category term="数据库" scheme="http://sixkery.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>缓存的使用</title>
    <link href="http://sixkery.top/2019/05/21/2019-5-21-cache/"/>
    <id>http://sixkery.top/2019/05/21/2019-5-21-cache/</id>
    <published>2019-05-21T13:15:06.000Z</published>
    <updated>2020-08-12T00:10:54.594Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot 2.x 使用 Redis 缓存，存储到 Redis 会出现乱码。是因为默认情况下采用 jdk 的序列化的方式。<br>这里修改序列化的方式。<br>需要在 maven 中引入 fastjson 坐标。<br>自定义序列化类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sixkery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/5/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonRedisSerializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 仅仅用作识别JSON.parseObject(text,class)方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SerializerFeature[] SERIALIZER_FEATURES = <span class="keyword">new</span> SerializerFeature[]&#123;</span><br><span class="line">            SerializerFeature.PrettyFormat</span><br><span class="line">            , SerializerFeature.SkipTransientField</span><br><span class="line"><span class="comment">//            , SerializerFeature.WriteEnumUsingName</span></span><br><span class="line"><span class="comment">//            , SerializerFeature.WriteDateUseDateFormat</span></span><br><span class="line">            , SerializerFeature.WriteNullStringAsEmpty</span><br><span class="line">            , SerializerFeature.WriteNullListAsEmpty</span><br><span class="line">            , SerializerFeature.WriteMapNullValue</span><br><span class="line">            <span class="comment">// 【重点】序列化的时候必须需要带上Class类型，否则反序列化的时候无法知道Class类型</span></span><br><span class="line">            , SerializerFeature.WriteClassName</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 序列化的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SerializationException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="keyword">return</span> t == <span class="keyword">null</span> ? <span class="keyword">null</span> : JSON.toJSONString(t, SERIALIZER_FEATURES).getBytes(StandardCharsets.UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     * clazz为 null 也可以反序列化成功是因为对象在序列化的时候保存了对象的 class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SerializationException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bytes == <span class="keyword">null</span> ? <span class="keyword">null</span> : JSON.parseObject(<span class="keyword">new</span> String(bytes, StandardCharsets.UTF_8), clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义RedisTemplate&lt;String,T&gt;Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * <span class="meta">@author</span> sixkery</span><br><span class="line"> * <span class="meta">@date</span> <span class="number">2019</span>/<span class="number">5</span>/<span class="number">11</span></span><br><span class="line"> */</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义序列化</span></span><br><span class="line"><span class="comment">     * 这里的FastJsonRedisSerializer引用的自己定义的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">RedisTemplate&lt;String, T&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//redis反序列化 开启fastJson反序列化的autoType</span></span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        RedisTemplate&lt;String, T&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        FastJsonRedisSerializer fastJsonRedisSerializer = <span class="keyword">new</span> FastJsonRedisSerializer&lt;T&gt;();</span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        redisTemplate.setDefaultSerializer(fastJsonRedisSerializer);</span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        redisTemplate.setValueSerializer(fastJsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(fastJsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, User&gt; redisTemplate;</span><br></pre></td></tr></table></figure><p>SpringBoot 中缓存的原理<br>注解</p><p>@Cacheable<br>将方法的运行结果进行缓存；以后再要相同的数据，直接从缓存中获取，不用调用方法；<br>CacheManager管理多个Cache组件的，对缓存的真正CRUD操作在Cache组件中，每一个缓存组件有自己唯一一个名字；</p><p> 原理：</p><ol><li>自动配置类；CacheAutoConfiguration</li><li>缓存的配置类<br>org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration<br>org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration<br>org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration org.springframework.boot.autoconfigure.cache.HazelcastCacheConfiguration<br>org.springframework.boot.autoconfigure.cache.InfinispanCacheConfiguration<br>org.springframework.boot.autoconfigure.cache.CouchbaseCacheConfiguration<br>org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration<br>org.springframework.boot.autoconfigure.cache.CaffeineCacheConfiguration<br>org.springframework.boot.autoconfigure.cache.GuavaCacheConfiguration<br>org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration【默认】<br>org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration</li><li>哪个配置类默认生效：SimpleCacheConfiguration；</li><li>给容器中注册了一个CacheManager：ConcurrentMapCacheManager</li><li>可以获取和创建ConcurrentMapCache类型的缓存组件；他的作用将数据保存在ConcurrentMap中；</li></ol><p>运行流程：<br>@Cacheable：</p><ol><li>方法运行之前，先去查询Cache（缓存组件），按照cacheNames指定的名字获取；<br>（CacheManager先获取相应的缓存），第一次获取缓存如果没有Cache组件会自动创建。<ol start="2"><li>去Cache中查找缓存的内容，使用一个key，默认就是方法的参数；<br>key是按照某种策略生成的；默认是使用keyGenerator生成的，默认使用SimpleKeyGenerator生成key；<br>SimpleKeyGenerator生成key的默认策略；<br>如果没有参数；key=new SimpleKey()；<br>如果有一个参数：key=参数的值<br>如果有多个参数：key=new SimpleKey(params)；</li></ol></li><li>没有查到缓存就调用目标方法；</li><li>将目标方法返回的结果，放进缓存中<br>@Cacheable标注的方法执行之前先来检查缓存中有没有这个数据，默认按照参数的值作为key去查询缓存，<br>如果没有就运行方法并将结果放入缓存；以后再来调用就可以直接使用缓存中的数据；</li></ol><p>核心：<br>  1）、使用CacheManager【ConcurrentMapCacheManager】按照名字得到Cache【ConcurrentMapCache】组件<br>  2）、key使用keyGenerator生成的，默认是SimpleKeyGenerator</p><p>  几个属性：<br>cacheNames/value：指定缓存组件的名字;将方法的返回结果放在哪个缓存中，是数组的方式，可以指定多个缓存；<br>key：缓存数据使用的key；可以用它来指定。默认是使用方法参数的值  1-方法的返回值<br>编写SpEL； #i d;参数id的值   #a0  #p0  #root.args[0]  getEmp[2]</p><p> keyGenerator：key的生成器；可以自己指定key的生成器的组件id<br>                  key/keyGenerator：二选一使用;<br>          cacheManager：指定缓存管理器；或者cacheResolver指定获取解析器<br>         condition：指定符合条件的情况下才缓存；<br>                  ,condition = “#id&gt;0”<br>         condition = “#a0&gt;1”：第一个参数的值》1的时候才进行缓存<br>unless:否定缓存；当unless指定的条件为true，方法的返回值就不会被缓存；可以获取到结果进行判断<br>             unless = “#result == null”<br>            unless = “#a0==2”:如果第一个参数的值是2，结果不缓存；<br>     sync：是否使用异步模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = &#123;&quot;emp&quot;&#125;/*,keyGenerator = &quot;myKeyGenerator&quot;,condition = &quot;#a0&gt;1&quot;,unless = &quot;#a0==2&quot;*/)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询&quot;</span>+id+<span class="string">&quot;号员工&quot;</span>);</span><br><span class="line">        Employee emp = employeeMapper.getEmpById(id);</span><br><span class="line">        <span class="keyword">return</span> emp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SpringBoot 2.x 使用 Redis 缓存，存储到 Redis 会出现乱码。是因为默认情况下采用 jdk 的序列化的方式。&lt;br&gt;这里修改序列化的方式。&lt;br&gt;需要在 maven 中引入 fastjson 坐标。&lt;br&gt;自定义序列化类&lt;/p&gt;
&lt;figure cl</summary>
      
    
    
    
    <category term="Java" scheme="http://sixkery.top/categories/Java/"/>
    
    
    <category term="缓存" scheme="http://sixkery.top/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>后台页面状态展示</title>
    <link href="http://sixkery.top/2019/05/20/2019-5-20-enum/"/>
    <id>http://sixkery.top/2019/05/20/2019-5-20-enum/</id>
    <published>2019-05-20T13:15:06.000Z</published>
    <updated>2020-08-12T00:10:54.594Z</updated>
    
    <content type="html"><![CDATA[<p>遇到一个业务场景是这样的，在后台系统的页面上展示订单状态和支付状态。这里的订单状态分为新订单、完结订单和取消订单。支付状态分为等待支付和支付成功。<br><img src="../images/1574337996440.png" alt="页面"><br>通常的做法是在后台写 if 语句进行判断展示。但是如果业务量变得庞大，有许多的枚举进行判断。那我们不要写死 <i class="fas fa-hiking"></i>。<br>这里给出一种相对完美的解决方案。<br>首先看我们的枚举。<br>订单状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span> <span class="comment">// 这里使用了 lombok</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">OrderStatusEnum</span> </span>&#123;</span><br><span class="line">    NEW(<span class="number">0</span>,<span class="string">&quot;新订单&quot;</span>),</span><br><span class="line">    FINISHED(<span class="number">1</span>,<span class="string">&quot;完结&quot;</span>),</span><br><span class="line">    CANCEL(<span class="number">2</span>,<span class="string">&quot;已取消&quot;</span>)</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    OrderStatusEnum(Integer code, String message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支付状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">PayStatusEnum</span> </span>&#123;</span><br><span class="line">    WAIT(<span class="number">0</span>,<span class="string">&quot;等待支付&quot;</span>),</span><br><span class="line">    SUCCESS(<span class="number">1</span>,<span class="string">&quot;支付成功&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    PayStatusEnum(Integer code, String message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="升级步骤一"><a href="#升级步骤一" class="headerlink" title="升级步骤一"></a>升级步骤一</h4><p>在 OrderDTO 数据传输对象中，添加两个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span> <span class="comment">// 对象转成 json 忽略这个方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderStatusEnum <span class="title">getOrderStatusEnum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> EnumUtil.getByCode(orderStatus, OrderStatusEnum.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PayStatusEnum <span class="title">getPayStatusEnum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> EnumUtil.getByCode(payStatus, PayStatusEnum.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个公共的接口，让 OrderStatusEnum 和 PayStatusEnum 实现这个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CodeEnum</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">getCode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个EnumUtil 用来获取 code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sixkery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/4/21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends CodeEnum&gt; <span class="function">T <span class="title">getByCode</span><span class="params">(Integer code, Class&lt;T&gt; enumClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (T each : enumClass.getEnumConstants()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (code.equals(each.getCode())) &#123;</span><br><span class="line">                <span class="keyword">return</span> each;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;遇到一个业务场景是这样的，在后台系统的页面上展示订单状态和支付状态。这里的订单状态分为新订单、完结订单和取消订单。支付状态分为等待支付和支付成功。&lt;br&gt;&lt;img src=&quot;../images/1574337996440.png&quot; alt=&quot;页面&quot;&gt;&lt;br&gt;通常的做法是在后</summary>
      
    
    
    
    <category term="Java" scheme="http://sixkery.top/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="http://sixkery.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 格式转换成 HTML</title>
    <link href="http://sixkery.top/2019/03/11/2019-3-11%2021-Markdown/"/>
    <id>http://sixkery.top/2019/03/11/2019-3-11%2021-Markdown/</id>
    <published>2019-03-11T13:15:06.000Z</published>
    <updated>2020-08-12T00:10:54.594Z</updated>
    
    <content type="html"><![CDATA[<p>maven 中导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--markdown 编辑的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlassian.commonmark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commonmark<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--添加 markdown 扩展--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlassian.commonmark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commonmark-ext-heading-anchor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加 markdown 扩展--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atlassian.commonmark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commonmark-ext-gfm-tables<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sixkery.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.commonmark.Extension;</span><br><span class="line"><span class="keyword">import</span> org.commonmark.ext.gfm.tables.TableBlock;</span><br><span class="line"><span class="keyword">import</span> org.commonmark.ext.gfm.tables.TablesExtension;</span><br><span class="line"><span class="keyword">import</span> org.commonmark.ext.heading.anchor.HeadingAnchorExtension;</span><br><span class="line"><span class="keyword">import</span> org.commonmark.node.Link;</span><br><span class="line"><span class="keyword">import</span> org.commonmark.node.Node;</span><br><span class="line"><span class="keyword">import</span> org.commonmark.parser.Parser;</span><br><span class="line"><span class="keyword">import</span> org.commonmark.renderer.html.AttributeProvider;</span><br><span class="line"><span class="keyword">import</span> org.commonmark.renderer.html.AttributeProviderContext;</span><br><span class="line"><span class="keyword">import</span> org.commonmark.renderer.html.AttributeProviderFactory;</span><br><span class="line"><span class="keyword">import</span> org.commonmark.renderer.html.HtmlRenderer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * markdown格式转换成 HTML 格式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sixkery</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarkdownUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * markdown格式转换成HTML格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> markdown</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">markdownToHtml</span><span class="params">(String markdown)</span> </span>&#123;</span><br><span class="line">        Parser parser = Parser.builder().build();</span><br><span class="line">        Node document = parser.parse(markdown);</span><br><span class="line">        HtmlRenderer renderer = HtmlRenderer.builder().build();</span><br><span class="line">        <span class="keyword">return</span> renderer.render(document);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加扩展[标题锚点，表格生成]</span></span><br><span class="line"><span class="comment">     * Markdown转换成HTML</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> markdown</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">markdownToHtmlExtensions</span><span class="params">(String markdown)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//h 标题生成 id</span></span><br><span class="line">        Set&lt;Extension&gt; headingAnchorExtensions = Collections.singleton(HeadingAnchorExtension.create());</span><br><span class="line">        <span class="comment">//转换table的HTML</span></span><br><span class="line">        List&lt;Extension&gt; tableExtension = Arrays.asList(TablesExtension.create());</span><br><span class="line">        Parser parser = Parser.builder()</span><br><span class="line">                .extensions(tableExtension)</span><br><span class="line">                .build();</span><br><span class="line">        Node document = parser.parse(markdown);</span><br><span class="line">        HtmlRenderer renderer = HtmlRenderer.builder()</span><br><span class="line">                .extensions(headingAnchorExtensions)</span><br><span class="line">                .extensions(tableExtension)</span><br><span class="line">                .attributeProviderFactory(<span class="keyword">new</span> AttributeProviderFactory() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> AttributeProvider <span class="title">create</span><span class="params">(AttributeProviderContext context)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> CustomAttributeProvider();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> renderer.render(document);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理标签的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAttributeProvider</span> <span class="keyword">implements</span> <span class="title">AttributeProvider</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttributes</span><span class="params">(Node node, String tagName, Map&lt;String, String&gt; attributes)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//改变a标签的target属性为_blank</span></span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Link) &#123;</span><br><span class="line">                attributes.put(<span class="string">&quot;target&quot;</span>, <span class="string">&quot;_blank&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TableBlock) &#123;</span><br><span class="line">                attributes.put(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;ui celled table&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String table = <span class="string">&quot;| hello | hi   | 哈哈哈   |\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;| ----- | ---- | ----- |\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;| 斯维尔多  | 士大夫  | f啊    |\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;| 阿什顿发  | 非固定杆 | 撒阿什顿发 |\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        String a = <span class="string">&quot;[imCoding 爱编程](http://www.lirenmi.cn)&quot;</span>;</span><br><span class="line">        System.out.println(markdownToHtmlExtensions(table));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;maven 中导入依赖&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa</summary>
      
    
    
    
    <category term="Java" scheme="http://sixkery.top/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="http://sixkery.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>工具类</title>
    <link href="http://sixkery.top/2019/03/11/2019-3-11-tool/"/>
    <id>http://sixkery.top/2019/03/11/2019-3-11-tool/</id>
    <published>2019-03-11T13:15:06.000Z</published>
    <updated>2020-08-12T00:10:54.594Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Cookie-工具类"><a href="#Cookie-工具类" class="headerlink" title="Cookie 工具类"></a>Cookie 工具类</h3><p>获取 cookie 和设置 cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* cookie 工具类,获取 cookie 和设置 cookie</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> sixkery</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2019/5/28</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置cookie</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response response 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name     cookie 名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value    cookie 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxAge   过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(HttpServletResponse response, String name, String value, <span class="keyword">int</span> maxAge)</span> </span>&#123;</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(name, value);</span><br><span class="line">        cookie.setMaxAge(maxAge);</span><br><span class="line">        cookie.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 cookie</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request request 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name    cookie的名字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> cookie</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title">get</span><span class="params">(HttpServletRequest request, String name)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Cookie&gt; cookieMap = readCookieMap(request);</span><br><span class="line">        <span class="keyword">if</span> (cookieMap.containsKey(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> cookieMap.get(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 cookies 数组转换成 Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request request 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 封装成的 cookieMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Cookie&gt; <span class="title">readCookieMap</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Cookie&gt; cookieMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                cookieMap.put(cookie.getName(), cookie);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cookieMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Cookie-工具类&quot;&gt;&lt;a href=&quot;#Cookie-工具类&quot; class=&quot;headerlink&quot; title=&quot;Cookie 工具类&quot;&gt;&lt;/a&gt;Cookie 工具类&lt;/h3&gt;&lt;p&gt;获取 cookie 和设置 cookie&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    <category term="Java" scheme="http://sixkery.top/categories/Java/"/>
    
    
    <category term="java" scheme="http://sixkery.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Python爬取《春风十里不如你》分析</title>
    <link href="http://sixkery.top/2018/12/20/2018-12-20-ten-miles/"/>
    <id>http://sixkery.top/2018/12/20/2018-12-20-ten-miles/</id>
    <published>2018-12-20T13:15:06.000Z</published>
    <updated>2020-08-12T00:10:54.579Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>人的一生要经历太多的生离死别，那些突如其来的离别往往将人伤得措手不及。<br>人生何处不相逢，但有些转身，真的就是一生，从此后会无期，永不相见。<br>用力爱过的人，讲再见那一刻格外艰难。<br>世界上最遥远的距离不是生离死别，而是对方已经云淡风轻，你却念念不忘。<br>——网友评论</p></blockquote><p>一直很喜欢这首歌。正好学习python ，想着把这首歌的热门评论爬下来，看看网友的故事。</p><p>网易云音乐是一个有情怀的地方。大多数想说却没有办法说出口的话都能留在评论里。</p><p>费话不说了，开工。</p><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>打开网易云音乐，找到歌曲春分十里不如你，打开开发者工具，分析页面。<br><img src="https://upload-images.jianshu.io/upload_images/13161325-a070dfc506dd8c88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="页面内容"><br>通过 搜索框 url 的 id 可以定位到评论的 url 。看到请求是 post 方法的，我们可以看到下边的两个参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">params: 12PSl54ZzScPr+B27R+RJ14gF4YwwNz8YqWdldaCKao1s1/JexmIcnpaQu7oAkXM96vPBpEo42vFSp3BydeeYs6TKv/72oKRITbhg8hUP2vwsNW+hq8VfDvmjcq+ceScl9wEb3Wh6Whnu85Th7jHK4lNNKxNSJakjxuVnNcCDteI76F2xviD4jDcz9upF8CY</span><br><span class="line">encSecKey: 227faa18d4ac5f4dfa07b4f0664bcb181240fcfb74192d7ce86b19ce302c61c8a5f2cbf45fc8874b5d74f0f6320f7681eef36e3f3a4d8349eed908188aae9717dd64f4d678e1d15afb8f06b559ebd51b2bca7b225f274378d89c068e18f7f8d45f7019e6923c2a0da30a4b68ecdfe2d6dcb954c3cfb0ec8812da693944617678</span><br></pre></td></tr></table></figure><p>至于这两个参数怎么破解，小弟确实不会，不过有知乎大神已经破解过了，想要了解的可以移步知乎获取方法。</p><p>我们就直接拿到这两个参数去请求就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取评论数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>():</span></span><br><span class="line">    url = <span class="string">&#x27;https://music.163.com/weapi/v1/resource/comments/R_SO_4_38576323?csrf_token=&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;music.163.com&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://music.163.com&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://music.163.com/song?id=38576323&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;</span></span><br><span class="line">               &#125;</span><br><span class="line">    data = &#123;<span class="string">&#x27;params&#x27;</span>: <span class="string">&#x27;12PSl54ZzScPr+B27R+RJ14gF4YwwNz8YqWdldaCKao1s1/JexmIcnpaQu7oAkXM96vPBpEo42vFSp3BydeeYs6TKv/72oKRITbhg8hUP2vwsNW+hq8VfDvmjcq+ceScl9wEb3Wh6Whnu85Th7jHK4lNNKxNSJakjxuVnNcCDteI76F2xviD4jDcz9upF8CY&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;encSecKey&#x27;</span>: <span class="string">&#x27;227faa18d4ac5f4dfa07b4f0664bcb181240fcfb74192d7ce86b19ce302c61c8a5f2cbf45fc8874b5d74f0f6320f7681eef36e3f3a4d8349eed908188aae9717dd64f4d678e1d15afb8f06b559ebd51b2bca7b225f274378d89c068e18f7f8d45f7019e6923c2a0da30a4b68ecdfe2d6dcb954c3cfb0ec8812da693944617678&#x27;</span>&#125;</span><br><span class="line">    response = requests.post(url,headers=headers,data=data)</span><br></pre></td></tr></table></figure><p>请求完发现数据是 json 格式的，那么获取就没有什么难度了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">html = json.loads(response.text)</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> html[<span class="string">&#x27;hotComments&#x27;</span>]:</span><br><span class="line">    content = &#123;<span class="string">&#x27;user&#x27;</span>:item[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;nickname&#x27;</span>],</span><br><span class="line">              <span class="string">&#x27;likedCount&#x27;</span>:item[<span class="string">&#x27;likedCount&#x27;</span>],</span><br><span class="line">               <span class="string">&#x27;content&#x27;</span>:item[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">               &#125;</span><br><span class="line">    result.append(content)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="可视化操作"><a href="#可视化操作" class="headerlink" title="可视化操作"></a>可视化操作</h2><p>获取数据之后，我们把数据做的直观一点，便于查看。</p><p><img src="https://upload-images.jianshu.io/upload_images/13161325-9290f8ec918e1c45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="直方图"><br>看一下点赞首位的评论：</p><p>听完这首歌，立刻定了下午五点的机票去北京找你。所以这次我用尽全力想对你说，你可不可以答应我，在我考上研究生到北京找你之前，你先不要结婚。不管我多么不喜欢北京，可是北京有你。没有你的杭州再美，也比不上有你的北京。</p><p>因为一个人爱上一座城。没有你的城市再好的风景也淡然无味。</p><p><img src="https://upload-images.jianshu.io/upload_images/13161325-412e5e466e8cb70d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="词云图"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>总有一天，会有一个人，看你写过的所有状态，读完写的所有微博，看你从小到大的所有照片，甚至去别的地方寻找关于你的信息，试着听你听的歌，走你走过的地方，看你喜欢看的书，品尝你总是大呼好吃的东西……只是想弥补上，他迟到的时光。</p><p>代码上传到 <a href="https://github.com/sixkery/python-">github</a> 点击可查看。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;人的一生要经历太多的生离死别，那些突如其来的离别往往将人伤得措手不及。&lt;br&gt;人生何处不相逢，但有些转身，真的就是一生，从此后会无期，永不相见。&lt;br&gt;用力爱过的人，讲再见那一刻格外艰难。&lt;br&gt;世界上最遥远的距离不是生离死别，而是对方已经云淡风轻</summary>
      
    
    
    
    <category term="爬虫" scheme="http://sixkery.top/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="http://sixkery.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>PageHelper 在springboot 中的使用</title>
    <link href="http://sixkery.top/2018/11/01/2018-4-20-github-edit/"/>
    <id>http://sixkery.top/2018/11/01/2018-4-20-github-edit/</id>
    <published>2018-11-01T13:15:06.000Z</published>
    <updated>2020-08-12T00:10:54.579Z</updated>
    
    <content type="html"><![CDATA[<p>分页的逻辑在业务中总是存在，虽说不算复杂，但也必须处理。结合 Mybatis 使用，PageHelper 无疑是最好的选择。</p><h3 id="引入坐标"><a href="#引入坐标" class="headerlink" title="引入坐标"></a>引入坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页插件pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件中配置"><a href="#配置文件中配置" class="headerlink" title="配置文件中配置"></a>配置文件中配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">  <span class="attr">helper-dialect:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">reasonable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">support-methods-arguments:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">params:</span> <span class="string">count=countSql</span></span><br></pre></td></tr></table></figure><h3 id="代码中使用"><a href="#代码中使用" class="headerlink" title="代码中使用"></a>代码中使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageInfo&lt;Article&gt; <span class="title">queryArticleByPage</span><span class="params">(Integer currentPage, Integer pageSize)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">PageHelper.startPage(currentPage, pageSize);</span><br><span class="line">List&lt;Article&gt; list = articleMapper.queryAllArticle();</span><br><span class="line">PageInfo&lt;Article&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pageInfo;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分页的逻辑在业务中总是存在，虽说不算复杂，但也必须处理。结合 Mybatis 使用，PageHelper 无疑是最好的选择。&lt;/p&gt;
&lt;h3 id=&quot;引入坐标&quot;&gt;&lt;a href=&quot;#引入坐标&quot; class=&quot;headerlink&quot; title=&quot;引入坐标&quot;&gt;&lt;/a&gt;引入坐标</summary>
      
    
    
    
    <category term="SpringBoot" scheme="http://sixkery.top/categories/SpringBoot/"/>
    
    
    <category term="分页" scheme="http://sixkery.top/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令</title>
    <link href="http://sixkery.top/2018/11/01/2019-7-8-Linux/"/>
    <id>http://sixkery.top/2018/11/01/2019-7-8-Linux/</id>
    <published>2018-11-01T13:15:06.000Z</published>
    <updated>2020-08-12T00:10:54.594Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 下 Java 程序后台运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar eureka-0.0.1-SNAPSHOT.jar &amp;</span><br></pre></td></tr></table></figure><ul><li>nohup：关闭程序，退出账号依然运行</li><li>&amp;：后台运行</li></ul><p>在Windows 下运行 Linux 命令，可以使用 Git 的 bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tail -f </span><br><span class="line">````</span><br><span class="line">实时监控日志</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装并运行 rabbitMQ</span><br><span class="line">```shell</span><br><span class="line">docker run -d --hostname my-rabbit -p 5672:5672 -p 15672:15672 rabbitmq:3.7.3-management</span><br></pre></td></tr></table></figure><p>映射的端口：5672<br>管理界面的端口：15672<br>浏览器输入 ip:管理界面的端口 访问管理界面，用户名密码都是 guest</p><p>docker ps 查看当前启动的容器 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux 下 Java 程序后台运行&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td </summary>
      
    
    
    
    <category term="Linux" scheme="http://sixkery.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://sixkery.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>明朝那些事儿</title>
    <link href="http://sixkery.top/2018/10/15/2018-3-26-diary/"/>
    <id>http://sixkery.top/2018/10/15/2018-3-26-diary/</id>
    <published>2018-10-15T13:15:06.000Z</published>
    <updated>2020-08-12T00:10:54.579Z</updated>
    
    <content type="html"><![CDATA[<p>今天中午看完了《明朝那些事儿》，历时几天也没有算过。网易蜗牛读书知道。这些不重要，看完想说的点什么，就当随便感悟一下吧。</p><p>先看一下网友的评论吧。</p><p><img src="https://upload-images.jianshu.io/upload_images/13161325-095c26efac6db240.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网友评论"></p><p>这本书，作者写的确实幽默，要不然这么多的内容，我觉得我是没有耐心看完的。感谢作者一下。</p><p>前几天同学无聊聊到明朝那几个皇帝了，说各个都是奇葩。奇葩也还行吧。但我觉得，挺悲哀的。那些奇葩大多是自己不想当皇帝，没办法，轮到你，不当也不行，那就当吧。结果呢，明熹宗朱由校，也就是天启皇帝。喜欢木匠，大字不识一个，明知道奸臣当道，就是不作为，你别妨碍我玩木匠就完事。</p><p>这是我在这个软件上看完的第二本书，刚上大学的时候，决定在大学里一定要多看书。于是，没事的时候就跑去图书馆，（好像就没有什么所谓的有事吧）现在已经不记得当时看过什么。没过多久，游戏已经占据了我的时间~~</p><p>这本书写的幽默，并不代表历史就是幽默的，很多历史人物是极其复杂的，比如说戚继光，抗倭的同时也在搞腐败，搞点小动作，为啥，因为光靠给的物资不足以支撑军队的开销，不搞点小动作怎么抗倭。伟大的英雄怎么怎么牛逼，但他们同样有缺点的，我们要客观的看待，同时也要理解自身存在的缺点。尽量改造就好。</p><p>对于历史，我只停留在从小学到中学课本上学到的那些东西，现在再想估计已经还给老师了。从本能上我是很抗拒的，我想绝大部分原因是上学的时候，每次历史课不是背哪个朝代什么时候灭亡，就是背哪个朝代改革对经济，文化的影响。现在想想头都是大的。</p><p>这不是一种好的学习方式，所以我决定，将来我的孩子只要爱看书，历史考零蛋我都不管。</p><p>书的最后写的很好，按照自己喜欢的方式度过这一生，我很喜欢。</p><p>知乎上有这样一个帖子：「读书有什么用？」<br>有一个回答是这样的：你从小到大吃过的饭，当时看起来没有用，只能满足你的胃口，但确实融入了你的身体。现在你看书，看过就忘，并没有什么价值，等你不自觉的用的时，就不会再问这个问题了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天中午看完了《明朝那些事儿》，历时几天也没有算过。网易蜗牛读书知道。这些不重要，看完想说的点什么，就当随便感悟一下吧。&lt;/p&gt;
&lt;p&gt;先看一下网友的评论吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_</summary>
      
    
    
    
    <category term="随笔" scheme="http://sixkery.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="生活" scheme="http://sixkery.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Git命令</title>
    <link href="http://sixkery.top/2018/09/01/2018-9-01-git/"/>
    <id>http://sixkery.top/2018/09/01/2018-9-01-git/</id>
    <published>2018-09-01T13:15:06.000Z</published>
    <updated>2020-08-12T00:10:54.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ol><li><p>git init : 初始化仓库，把这个目录变成 Git 可以管理的仓库。创建完成之后，目录下多出来一个 「.git」目录</p></li><li><p>git add 「文件名」或 「.」: 把文件名添加到暂存区，或把当前目录下的所有文件添加到暂存区。</p></li><li><p>git commit -m 「日志信息」: 把文件添加到本地仓库。</p></li><li><p>git status : 查看当前仓库的状态。</p></li><li><p>git diff : 修改的内容是什么。查看工作区的修改和仓库中的文件有那些区别。diff : 即是 difference</p></li><li><p>git log : 查看历史记录，倒序排列，最近一次在最上边。第一次提交在最下边。</p></li><li><p>git commit -a : 添加暂存区并提交，然后在跳出的 vim 编辑器中切换到编辑模式「i」,写入日志信息。切换到普通模式「esc」。然后「:wq」保存并退出。</p></li><li><p>git log –pretty=oneline : 可以只查看提交的 commit id (版本号)和提交的日志信息。倒序排列。</p></li><li><p>git reset –hard HEAD^ : 回退到上一个版本。「HEAD」代表当前版本，<code>「^」</code>代表上一个版本。上上个版本「^^」两个。commit_id 可以只写前面几位。<br>HEAD 指向的版本就是当前版本，因此，Git 允许我们在版本的历史之间穿梭，使用命令 git reset –hard commit_id。<br>穿梭前，用 git log 可以查看提交历史，以便确定要回退到哪个版本。<br>要重返未来，用 git reflog 查看命令历史，以便确定要回到未来的哪个版本</p></li><li><p>撤销修改<br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。或者直接删除。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，把暂存区的修改撤销掉。就回到了场景1，第二步按场景1操作 <code>git checkout --file</code>。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考9，不过前提是没有推送到远程库。</p></li><li><p>关联远程仓库 : <code>git remote add origin git@github.com:sixkery/repo-name.git</code> 。<br>关联后使用命令 <code>git push -u origin master</code> 第一次推送 master 分支到远程仓库。</p><p>以后的提交使用 <code>git push origin master</code> 或 <code>git push</code></p></li><li><dl><dt>从远程仓库克隆一个仓库</dt><dd><code>git clone 仓库地址</code></dd></dl></li></ol><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ol><li><p><code>git checkout -b dev</code> 创建分支并切换到新创建的分支 :</p></li><li><p><code>git branch dev</code>  : 创建分支</p></li><li><p><code>git checkout dev</code> : 切换分支 或 命名 git switch</p></li><li><p>git branch : 查看当前分支。当前分支会有一个<code>「*」</code>号</p></li><li><p>git merge : 合并指定分支到当前分支。注：这是要在指定分支上完成操作。例：在 master 分支上创建分支 dev 。切换到 dev 分支。完成几个功能，然后准备合并分支。这时需要切换到 master 分支。执行命令 git mege 命令。这时 master 分支就和 dev 分支合并。当前 HEAD 指向 master 分支。就可以删除 dev 分支。</p></li><li><p>git branch -d &lt;分支名字&gt; : 删除分支</p></li><li><p>git log –graph : 查看分支合并图</p></li><li><p>git merge –no-ff -m “merge with no-ff” dev : 合并 dev 分支，可以看到曾经做过的合并。开发中尽量使用这个。</p></li><li><p>假设现在在 dev 分支上开发某个功能。这时需要你去修复一个 bug ，正常情况下，你会切换到 master 分支上「git checkout master」创建一个新的分支 issue-01「git checkout -b issue-01」 来修复这个 bug 。但是，你现在的 dev 分支上还有任务没有完成。这时候怎么办？</p><p>这是可以使用 git stash 命令，把当前 dev 分支上的工作现场存储起来。切换到 master 分支，创建 issue-01 分支修改 bug 。<strong>修改完了 bug 提交这次修改</strong>。切换到 master 分支。合并 issue-01 分支。之后就可以回到 dev 分支。使用命令git stash list 查看暂存的工作现场。需要恢复一下工作现场，使用命令 git stash pop 。这个命令可以把暂存的工作现场删除。这时就可以接着在 dev 分支上完成功能。当时请想一想。master 分支上的 bug 。在 dev 上是不是也存在呢。这时就需要把提交 bug 的修改复制到当前分支。使用命令 git cherry-pick <commit_id> 这里的 commit_id 是修改 bug 的提交 commit_id。</p></li><li><p>开发一个新的功能，最好新建一个分支：<code>git checkout -b feature-login</code> 然后提交新的功能。开发完成之后在 dev 分支上合并新的功能。如果没有合并，不想要这个功能可以使用命令 <code>git branch -D &lt;分支名称&gt;</code> 删除这个分支。（这里是强制删除分支上的内容，不过一般不建议这么干，万一那天产品经理抽风了呢）</p></li></ol><h3 id="多人协助"><a href="#多人协助" class="headerlink" title="多人协助"></a>多人协助</h3><p>从远程仓库中克隆到本地 「git clone 远程仓库地址」，远程仓库就和本地仓库对应起来。</p><p>git remote : 查看远程仓库的信息。</p><p>git remote -v : 显示详细信息，可以查看抓取和推送的地址。如果没有推送权限，看不到推送地址。</p><p>推送分支，把本地的分支推送到远程仓库中：<code>git push origin master</code> 。如果推送其他分支比如 dev 使用命令 : <code>git push origin dev</code> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;git init : 初始化仓库，把这个目录变成 Git 可以管理的仓库。创建完成之后，目录下多出来一个 「.gi</summary>
      
    
    
    
    <category term="工具" scheme="http://sixkery.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Git" scheme="http://sixkery.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>你真的看见了吗？</title>
    <link href="http://sixkery.top/2018/05/19/2018-5-19-see/"/>
    <id>http://sixkery.top/2018/05/19/2018-5-19-see/</id>
    <published>2018-05-19T13:15:06.000Z</published>
    <updated>2020-08-12T00:10:54.579Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了柴静的《看见》，还没有看完，看到了现实中好多的无奈，对一些事的认识更加的深入。但也往往意味着深深的无力感。</p><p>看到十年前的山西环境是有多么的差。但是焦化产业却占全省GDP的百分之七十。最开始的二十几个项目没有一个达标。觉得怎么治理呢。某一任领导班子说可以把山西是「全国最主要的污染源之一」的「之一」去掉，以此来体现壮士割腕的决心。不到一个月，因为黑砖事件被调去其他地方。讽刺吗？</p><p>看到弑夫的女人被判刑，家里的孩子没人看管。我们总说杀人偿命，在家庭暴力面前，却没有法律来保护她们。</p><p>看到中国财政2017年总收入17万亿，等于17家烟草总公司。在利润面前，约等于20个阿里巴巴。你觉得可以坚决的停掉烟草吗，有人或许不明白为什么，如果没有烟草的税收，国家的高铁还不能遍布南北东西，我们的第二艘航母或许还是一张图纸。公务员的工资好像还要欠着吧。</p><p>等等这些，不知道该怎么办。</p><p>以前是没有看过这些事，有个大致的概念，知道这些无奈。没办法。当我真正的了解之后，我觉得需要做些什么，虽然我不知道我能做些什么。</p><p>在你看不到的地方，有人默默忍受着，有人默默努力着。</p><p>讲一个我自己的事。</p><p>我的小舅，无业，身体健康。现在大概40岁左右了吧，不太记得，一直都没怎么关心。之所以没有关心是因为我讨厌他，特别讨厌。为什么呢。在我小的时候，每次只要他来我家，我都很害怕。我要把我的存钱罐赶紧藏起来。他一进我的房间，就会不停地扒我桌子的抽屉。找钱，找吃的。</p><p>因为他有精神病，家人都这么说，他打我外婆，问我外婆要钱，没钱给他，就来我家，去我姨家。在我姨家被我姨夫打了一顿之后不去了。老爸没在家。所以我很害怕他。</p><p>因为这个，小时候几乎没去过外婆家，就过节去过，跟在老妈背后。</p><p>之后懂事一些，不那么害怕他了。也没怎么来我家，就不去想这些了。</p><p>他真的有精神病吗，或许有或许没有。我的老妈说他好吃懒做。这么多年了没有赚过一分钱，全靠外婆养着。那他们之间的日常生活是什么样的呢。</p><p>我只希望事情越来越好！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近看了柴静的《看见》，还没有看完，看到了现实中好多的无奈，对一些事的认识更加的深入。但也往往意味着深深的无力感。&lt;/p&gt;
&lt;p&gt;看到十年前的山西环境是有多么的差。但是焦化产业却占全省GDP的百分之七十。最开始的二十几个项目没有一个达标。觉得怎么治理呢。某一任领导班子说可以</summary>
      
    
    
    
    <category term="随笔" scheme="http://sixkery.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="生活" scheme="http://sixkery.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
